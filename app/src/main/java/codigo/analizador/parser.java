
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo.analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\042\000\002\002\004\000\002\006\005\000\002\006" +
                            "\013\000\002\006\004\000\002\006\012\000\002\007\003" +
                            "\000\002\007\003\000\002\002\003\000\002\002\003\000" +
                            "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
                            "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
                            "\003\000\002\003\006\000\002\003\006\000\002\003\006" +
                            "\000\002\003\006\000\002\003\006\000\002\010\011\000" +
                            "\002\011\013\000\002\012\015\000\002\004\004\000\002" +
                            "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
                            "\005\000\002\005\005\000\002\005\004\000\002\005\005" +
                            "\000\002\005\003\000\002\005\005" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\132\000\006\015\004\016\005\001\002\000\014\004" +
                            "\047\021\046\022\043\023\044\024\050\001\002\000\004" +
                            "\031\010\001\002\000\004\002\007\001\002\000\004\002" +
                            "\001\001\002\000\012\003\013\026\012\031\015\033\011" +
                            "\001\002\000\022\020\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
                            "\uffe1\031\uffe1\032\uffe1\033\uffe1\001\002\000\010\026\012" +
                            "\031\015\033\011\001\002\000\012\020\uffe7\026\uffe7\031" +
                            "\uffe7\033\uffe7\001\002\000\012\020\031\026\012\031\015" +
                            "\033\011\001\002\000\010\026\012\031\015\033\011\001" +
                            "\002\000\020\020\uffe8\025\021\026\017\027\020\030\022" +
                            "\031\uffe8\033\uffe8\001\002\000\010\026\012\031\015\033" +
                            "\011\001\002\000\010\026\012\031\015\033\011\001\002" +
                            "\000\010\026\012\031\015\033\011\001\002\000\010\026" +
                            "\012\031\015\033\011\001\002\000\022\020\uffe0\025\uffe0" +
                            "\026\uffe0\027\020\030\022\031\uffe0\032\uffe0\033\uffe0\001" +
                            "\002\000\022\020\uffe6\025\uffe6\026\uffe6\027\020\030\022" +
                            "\031\uffe6\032\uffe6\033\uffe6\001\002\000\022\020\uffe4\025" +
                            "\uffe4\026\uffe4\027\020\030\022\031\uffe4\032\uffe4\033\uffe4" +
                            "\001\002\000\022\020\uffe5\025\uffe5\026\uffe5\027\020\030" +
                            "\022\031\uffe5\032\uffe5\033\uffe5\001\002\000\014\025\021" +
                            "\026\017\027\020\030\022\032\030\001\002\000\022\020" +
                            "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
                            "\033\uffe2\001\002\000\012\003\013\026\012\031\015\033" +
                            "\011\001\002\000\020\020\uffe9\025\021\026\017\027\020" +
                            "\030\022\031\uffe9\033\uffe9\001\002\000\012\020\034\026" +
                            "\012\031\015\033\011\001\002\000\006\004\037\017\035" +
                            "\001\002\000\004\032\ufffb\001\002\000\004\032\040\001" +
                            "\002\000\004\032\ufffc\001\002\000\010\002\ufffd\015\004" +
                            "\016\005\001\002\000\004\002\uffff\001\002\000\022\020" +
                            "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
                            "\033\uffe3\001\002\000\004\031\132\001\002\000\004\031" +
                            "\114\001\002\000\010\002\ufffe\015\004\016\005\001\002" +
                            "\000\004\031\110\001\002\000\004\031\074\001\002\000" +
                            "\004\031\051\001\002\000\012\003\013\026\012\031\015" +
                            "\033\011\001\002\000\004\032\073\001\002\000\012\020" +
                            "\054\026\012\031\015\033\011\001\002\000\012\003\013" +
                            "\026\012\031\015\033\011\001\002\000\012\020\056\026" +
                            "\012\031\015\033\011\001\002\000\012\003\013\026\012" +
                            "\031\015\033\011\001\002\000\012\020\060\026\012\031" +
                            "\015\033\011\001\002\000\024\003\071\005\072\006\066" +
                            "\007\067\010\064\011\065\012\061\013\063\014\070\001" +
                            "\002\000\004\032\ufff4\001\002\000\004\032\uffec\001\002" +
                            "\000\004\032\ufff5\001\002\000\004\032\ufff7\001\002\000" +
                            "\004\032\ufff6\001\002\000\004\032\ufff9\001\002\000\004" +
                            "\032\ufff8\001\002\000\004\032\ufff3\001\002\000\004\032" +
                            "\ufff2\001\002\000\004\032\ufffa\001\002\000\010\002\ufff0" +
                            "\015\ufff0\016\ufff0\001\002\000\012\003\013\026\012\031" +
                            "\015\033\011\001\002\000\004\032\107\001\002\000\012" +
                            "\020\077\026\012\031\015\033\011\001\002\000\012\003" +
                            "\013\026\012\031\015\033\011\001\002\000\012\020\101" +
                            "\026\012\031\015\033\011\001\002\000\012\003\013\026" +
                            "\012\031\015\033\011\001\002\000\012\020\103\026\012" +
                            "\031\015\033\011\001\002\000\012\003\013\026\012\031" +
                            "\015\033\011\001\002\000\012\020\105\026\012\031\015" +
                            "\033\011\001\002\000\024\003\071\005\072\006\066\007" +
                            "\067\010\064\011\065\012\061\013\063\014\070\001\002" +
                            "\000\004\032\uffeb\001\002\000\010\002\uffee\015\uffee\016" +
                            "\uffee\001\002\000\012\003\013\026\012\031\015\033\011" +
                            "\001\002\000\004\032\112\001\002\000\010\002\ufff1\015" +
                            "\ufff1\016\ufff1\001\002\000\004\002\000\001\002\000\012" +
                            "\003\013\026\012\031\015\033\011\001\002\000\004\032" +
                            "\131\001\002\000\012\020\117\026\012\031\015\033\011" +
                            "\001\002\000\012\003\013\026\012\031\015\033\011\001" +
                            "\002\000\012\020\121\026\012\031\015\033\011\001\002" +
                            "\000\012\003\013\026\012\031\015\033\011\001\002\000" +
                            "\012\020\123\026\012\031\015\033\011\001\002\000\012" +
                            "\003\013\026\012\031\015\033\011\001\002\000\012\020" +
                            "\125\026\012\031\015\033\011\001\002\000\012\003\013" +
                            "\026\012\031\015\033\011\001\002\000\012\020\127\026" +
                            "\012\031\015\033\011\001\002\000\024\003\071\005\072" +
                            "\006\066\007\067\010\064\011\065\012\061\013\063\014" +
                            "\070\001\002\000\004\032\uffea\001\002\000\010\002\uffed" +
                            "\015\uffed\016\uffed\001\002\000\012\003\013\026\012\031" +
                            "\015\033\011\001\002\000\004\032\134\001\002\000\010" +
                            "\002\uffef\015\uffef\016\uffef\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\132\000\004\006\005\001\001\000\004\003\044\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\004\013\005\015\001\001\000\002\001\001\000" +
                            "\004\005\041\001\001\000\002\001\001\000\004\005\031" +
                            "\001\001\000\004\005\026\001\001\000\002\001\001\000" +
                            "\004\005\025\001\001\000\004\005\024\001\001\000\004" +
                            "\005\023\001\001\000\004\005\022\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\004\032\005" +
                            "\015\001\001\000\002\001\001\000\004\005\031\001\001" +
                            "\000\004\007\035\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\006\040\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\006\112\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\010\004\052\005\015\010" +
                            "\051\001\001\000\002\001\001\000\004\005\031\001\001" +
                            "\000\006\004\054\005\015\001\001\000\004\005\031\001" +
                            "\001\000\006\004\056\005\015\001\001\000\004\005\031" +
                            "\001\001\000\004\002\061\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\004\075\005\015\011\074\001\001\000\002\001" +
                            "\001\000\004\005\031\001\001\000\006\004\077\005\015" +
                            "\001\001\000\004\005\031\001\001\000\006\004\101\005" +
                            "\015\001\001\000\004\005\031\001\001\000\006\004\103" +
                            "\005\015\001\001\000\004\005\031\001\001\000\004\002" +
                            "\105\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\004\052\005\015\010\110\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\004\115\005\015" +
                            "\012\114\001\001\000\002\001\001\000\004\005\031\001" +
                            "\001\000\006\004\117\005\015\001\001\000\004\005\031" +
                            "\001\001\000\006\004\121\005\015\001\001\000\004\005" +
                            "\031\001\001\000\006\004\123\005\015\001\001\000\004" +
                            "\005\031\001\001\000\006\004\125\005\015\001\001\000" +
                            "\004\005\031\001\001\000\004\002\127\001\001\000\002" +
                            "\001\001\000\002\001\001\000\010\004\075\005\015\011" +
                            "\132\001\001\000\002\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}



    private Symbol sym;
    private ArrayList<String> listado = new ArrayList<>();
    private ArrayList<Instruccion> temp = new ArrayList<>();
    private Instruccion temporal;

    public parser (LexerCup lex) {
        super(lex);
    }

    public Instruccion getTemporal(){
        return temporal;
    }

    public void setTemporal(Instruccion temporal){
        this.temporal = temporal;
    }

    public ArrayList<String> getListado(){
        return this.listado;
    }

    public ArrayList<Instruccion> getTemp(){
        return this.temp;
    }

    public void setTemp(ArrayList<Instruccion> temp){
        this.temp = temp;
    }

    public void setListado(ArrayList<String> listado){
        this.listado = listado;
    }

    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.left);
    }
    public Symbol getS(){
        return this.sym;
    }

    protected int error_sync_size() {
        return 1;
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {
        private final parser parser;

        /** Constructor */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= instruccion EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // instruccion ::= GRAFICAR figura instruccion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // instruccion ::= ANIMAR PARENTESIS_A parametro COMA parametro COMA animacion PARENTESIS_C instruccion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // instruccion ::= GRAFICAR figura
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // instruccion ::= ANIMAR PARENTESIS_A parametro COMA parametro COMA animacion PARENTESIS_C
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // animacion ::= LINEA
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // animacion ::= CURVA
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // color ::= AZUL
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // color ::= ROJO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // color ::= VERDE
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // color ::= AMARILLO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // color ::= NARANJA
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // color ::= MORADO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // color ::= CAFE
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // color ::= NEGRO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // color ::= error
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = "Se esperaba un color "+e;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // figura ::= CIRCULO PARENTESIS_A cuatro_param PARENTESIS_C
                {
                    Object RESULT =null;
                    temporal = new Instruccion(); temporal.setGraficar(true); temporal.setFigura("circulo"); temporal.setParametros(listado); temp.add(temporal);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // figura ::= CUADRADO PARENTESIS_A cuatro_param PARENTESIS_C
                {
                    Object RESULT =null;
                    temporal = new Instruccion(); temporal.setGraficar(true); temporal.setFigura("cuadrado");  temporal.setParametros(listado); temp.add(temporal);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // figura ::= RECTANGULO PARENTESIS_A cinco_param PARENTESIS_C
                {
                    Object RESULT =null;
                    temporal = new Instruccion(); temporal.setGraficar(true); temporal.setFigura("rectangulo");  temporal.setParametros(listado); temp.add(temporal);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // figura ::= LINEA PARENTESIS_A cinco_param PARENTESIS_C
                {
                    Object RESULT =null;
                    temporal = new Instruccion(); temporal.setGraficar(true); temporal.setFigura("linea"); temporal.setParametros(listado); temp.add(temporal);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // figura ::= POLIGONO PARENTESIS_A seis_param PARENTESIS_C
                {
                    Object RESULT =null;
                    temporal = new Instruccion(); temporal.setGraficar(true); temporal.setFigura("poligono"); temporal.setParametros(listado); temp.add(temporal);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // cuatro_param ::= parametro COMA parametro COMA parametro COMA color
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cuatro_param",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // cinco_param ::= parametro COMA parametro COMA parametro COMA parametro COMA color
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString()); listado.add(p5.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cinco_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // seis_param ::= parametro COMA parametro COMA parametro COMA parametro COMA parametro COMA color
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
                    int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int p6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int p6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object p6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString()); listado.add(p5.toString()); listado.add(p6.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("seis_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // parametro ::= parametro operacion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // parametro ::= operacion
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // parametro ::= error
                {
                    Object RESULT =null;
                    RESULT = "error se esperaba un numero u operacion valida";
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // operacion ::= operacion SUMA operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString())+Integer.parseInt(e2.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // operacion ::= operacion RESTA operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString())-Integer.parseInt(e2.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // operacion ::= operacion MULTIPLICACION operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(e1.toString())*Integer.parseInt(e2.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // operacion ::= RESTA operacion
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = -Integer.parseInt(e.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // operacion ::= PARENTESIS_A operacion PARENTESIS_C
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = Integer.parseInt(e.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // operacion ::= NUMERO
                {
                    Object RESULT =null;
                    int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = Integer.parseInt(n.toString());
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // operacion ::= operacion DIVISION operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = (int) (Integer.parseInt(e1.toString())/Integer.parseInt(e2.toString()));
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
