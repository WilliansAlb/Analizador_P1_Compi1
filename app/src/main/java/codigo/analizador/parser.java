
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo.analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\047\000\002\002\004\000\002\005\004\000\002\005" +
                            "\003\000\002\005\004\000\002\013\004\000\002\013\006" +
                            "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
                            "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
                            "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
                            "\003\000\002\002\003\000\002\002\003\000\002\003\004" +
                            "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
                            "\002\003\004\000\002\003\003\000\002\007\011\000\002" +
                            "\007\003\000\002\010\013\000\002\010\003\000\002\011" +
                            "\015\000\002\011\003\000\002\012\017\000\002\012\003" +
                            "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
                            "\002\004\005\000\002\004\003\000\002\004\005\000\002" +
                            "\004\003" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\135\000\010\003\006\007\005\020\004\001\002\000" +
                            "\016\003\050\004\054\026\053\027\047\030\051\031\055" +
                            "\001\002\000\004\006\014\001\002\000\010\003\006\007" +
                            "\005\020\004\001\002\000\012\002\uffff\003\006\007\005" +
                            "\020\004\001\002\000\004\002\011\001\002\000\004\002" +
                            "\001\001\002\000\004\002\000\001\002\000\004\002\ufffe" +
                            "\001\002\000\004\005\015\001\002\000\006\003\017\021" +
                            "\020\001\002\000\012\002\ufffc\003\ufffc\007\ufffc\020\ufffc" +
                            "\001\002\000\012\002\uffe8\003\uffe8\007\uffe8\020\uffe8\001" +
                            "\002\000\010\003\022\021\023\023\021\001\002\000\016" +
                            "\022\uffdd\025\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\001" +
                            "\002\000\016\022\uffdb\025\uffdb\032\uffdb\033\uffdb\034\uffdb" +
                            "\035\uffdb\001\002\000\010\003\022\021\023\023\021\001" +
                            "\002\000\014\025\027\032\030\033\025\034\026\035\031" +
                            "\001\002\000\010\003\022\021\023\023\021\001\002\000" +
                            "\010\003\022\021\023\023\021\001\002\000\010\003\022" +
                            "\021\023\023\021\001\002\000\010\003\022\021\023\023" +
                            "\021\001\002\000\010\003\022\021\023\023\021\001\002" +
                            "\000\016\022\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
                            "\uffdc\001\002\000\016\022\uffe1\025\uffe1\032\uffe1\033\uffe1" +
                            "\034\026\035\031\001\002\000\014\025\035\032\030\033" +
                            "\025\034\026\035\031\001\002\000\010\003\040\004\041" +
                            "\024\036\001\002\000\004\022\ufffa\001\002\000\004\022" +
                            "\042\001\002\000\004\022\ufff9\001\002\000\004\022\ufffb" +
                            "\001\002\000\012\002\uffe9\003\uffe9\007\uffe9\020\uffe9\001" +
                            "\002\000\016\022\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf" +
                            "\035\uffdf\001\002\000\016\022\uffe0\025\uffe0\032\uffe0\033" +
                            "\uffe0\034\026\035\031\001\002\000\014\022\046\032\030" +
                            "\033\025\034\026\035\031\001\002\000\016\022\uffde\025" +
                            "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\001\002\000\006" +
                            "\003\102\021\104\001\002\000\012\002\uffea\003\uffea\007" +
                            "\uffea\020\uffea\001\002\000\006\003\120\021\122\001\002" +
                            "\000\012\002\ufffd\003\ufffd\007\ufffd\020\ufffd\001\002\000" +
                            "\006\003\056\021\060\001\002\000\006\003\102\021\104" +
                            "\001\002\000\006\003\056\021\060\001\002\000\012\002" +
                            "\uffe6\003\uffe6\007\uffe6\020\uffe6\001\002\000\012\002\uffee" +
                            "\003\uffee\007\uffee\020\uffee\001\002\000\010\003\022\021" +
                            "\023\023\021\001\002\000\014\025\062\032\030\033\025" +
                            "\034\026\035\031\001\002\000\010\003\022\021\023\023" +
                            "\021\001\002\000\014\025\064\032\030\033\025\034\026" +
                            "\035\031\001\002\000\010\003\022\021\023\023\021\001" +
                            "\002\000\014\025\066\032\030\033\025\034\026\035\031" +
                            "\001\002\000\024\003\076\010\100\011\074\012\077\013" +
                            "\071\014\073\015\067\016\072\017\075\001\002\000\004" +
                            "\022\ufff2\001\002\000\004\022\101\001\002\000\004\022" +
                            "\ufff5\001\002\000\004\022\ufff3\001\002\000\004\022\ufff4" +
                            "\001\002\000\004\022\ufff7\001\002\000\004\022\ufff1\001" +
                            "\002\000\004\022\ufff0\001\002\000\004\022\ufff6\001\002" +
                            "\000\004\022\ufff8\001\002\000\012\002\uffe7\003\uffe7\007" +
                            "\uffe7\020\uffe7\001\002\000\012\002\uffe4\003\uffe4\007\uffe4" +
                            "\020\uffe4\001\002\000\012\002\uffec\003\uffec\007\uffec\020" +
                            "\uffec\001\002\000\010\003\022\021\023\023\021\001\002" +
                            "\000\014\025\106\032\030\033\025\034\026\035\031\001" +
                            "\002\000\010\003\022\021\023\023\021\001\002\000\014" +
                            "\025\110\032\030\033\025\034\026\035\031\001\002\000" +
                            "\010\003\022\021\023\023\021\001\002\000\014\025\112" +
                            "\032\030\033\025\034\026\035\031\001\002\000\010\003" +
                            "\022\021\023\023\021\001\002\000\014\025\114\032\030" +
                            "\033\025\034\026\035\031\001\002\000\024\003\076\010" +
                            "\100\011\074\012\077\013\071\014\073\015\067\016\072" +
                            "\017\075\001\002\000\004\022\116\001\002\000\012\002" +
                            "\uffe5\003\uffe5\007\uffe5\020\uffe5\001\002\000\012\002\uffef" +
                            "\003\uffef\007\uffef\020\uffef\001\002\000\012\002\uffe2\003" +
                            "\uffe2\007\uffe2\020\uffe2\001\002\000\012\002\uffeb\003\uffeb" +
                            "\007\uffeb\020\uffeb\001\002\000\010\003\022\021\023\023" +
                            "\021\001\002\000\014\025\124\032\030\033\025\034\026" +
                            "\035\031\001\002\000\010\003\022\021\023\023\021\001" +
                            "\002\000\014\025\126\032\030\033\025\034\026\035\031" +
                            "\001\002\000\010\003\022\021\023\023\021\001\002\000" +
                            "\014\025\130\032\030\033\025\034\026\035\031\001\002" +
                            "\000\010\003\022\021\023\023\021\001\002\000\014\025" +
                            "\132\032\030\033\025\034\026\035\031\001\002\000\010" +
                            "\003\022\021\023\023\021\001\002\000\014\025\134\032" +
                            "\030\033\025\034\026\035\031\001\002\000\024\003\076" +
                            "\010\100\011\074\012\077\013\071\014\073\015\067\016" +
                            "\072\017\075\001\002\000\004\022\136\001\002\000\012" +
                            "\002\uffe3\003\uffe3\007\uffe3\020\uffe3\001\002\000\012\002" +
                            "\uffed\003\uffed\007\uffed\020\uffed\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\135\000\006\005\007\013\006\001\001\000\004\003" +
                            "\051\001\001\000\002\001\001\000\006\005\012\013\006" +
                            "\001\001\000\006\005\011\013\006\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\007\015\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\004\023\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\004\044\001\001\000" +
                            "\002\001\001\000\004\004\043\001\001\000\004\004\042" +
                            "\001\001\000\004\004\033\001\001\000\004\004\032\001" +
                            "\001\000\004\004\031\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\006\036\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\011\136" +
                            "\001\001\000\002\001\001\000\004\012\120\001\001\000" +
                            "\002\001\001\000\004\010\116\001\001\000\004\011\102" +
                            "\001\001\000\004\010\056\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\004\060\001\001\000\002\001\001" +
                            "\000\004\004\062\001\001\000\002\001\001\000\004\004" +
                            "\064\001\001\000\002\001\001\000\004\002\067\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\004\104\001\001\000\002\001\001\000\004\004" +
                            "\106\001\001\000\002\001\001\000\004\004\110\001\001" +
                            "\000\002\001\001\000\004\004\112\001\001\000\002\001" +
                            "\001\000\004\002\114\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\004\122\001\001\000\002\001\001\000\004" +
                            "\004\124\001\001\000\002\001\001\000\004\004\126\001" +
                            "\001\000\002\001\001\000\004\004\130\001\001\000\002" +
                            "\001\001\000\004\004\132\001\001\000\002\001\001\000" +
                            "\004\002\134\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}



    private Symbol sym;
    private ArrayList<String> listado = new ArrayList<>();
    private ArrayList<Instruccion> temp = new ArrayList<>();
    private Instruccion temporal;
    private boolean existenErrores = false;
    private ArrayList<Errores> listado_errores = new ArrayList<>();
    private ArrayList<Operadores> listado_operadores = new ArrayList<>();
    private ColorObjeto listado_usos = new ColorObjeto();

    public parser (LexerCup lex) {
        super(lex);
    }

    public Instruccion getTemporal(){
        return temporal;
    }

    public ArrayList<Operadores> getListado_operadores(){
        return this.listado_operadores;
    }

    public ArrayList<Errores> getListado_errores(){
        return this.listado_errores;
    }

    public boolean isExistenErrores(){
        return this.existenErrores;
    }

    public ColorObjeto getListado_usos(){
        return listado_usos;
    }

    public void agregandoOperandos(String lexema, int linea, int columna, String ocurrencia){
        linea+=1;
        columna+=1;
        Operadores ope = new Operadores(lexema,linea+"",columna+"",ocurrencia);
        listado_operadores.add(ope);
    }

    public void agregandoErrores(String lexema, int linea, int columna, String tipo, String descripcion){
        linea+=1;
        columna+=1;
        Errores ope = new Errores(lexema,linea+"",columna+"",tipo,descripcion);
        listado_errores.add(ope);
    }

    public void sumarUno(String figura){
        switch (figura){
            case "circulo":
                getListado_usos().setCirculo(getListado_usos().getCirculo()+1);
                break;
            case "cuadrado":
                getListado_usos().setCuadrado(getListado_usos().getCuadrado()+1);
                break;
            case "rectangulo":
                getListado_usos().setRectangulo(getListado_usos().getRectangulo()+1);
                break;
            case "linea":
                getListado_usos().setLinea(getListado_usos().getLinea()+1);
                break;
            case "poligono":
                getListado_usos().setPoligono(getListado_usos().getPoligono()+1);
                break;
            case "linea_figura":
                getListado_usos().setLinea_figura(getListado_usos().getLinea_figura()+1);
                break;
            case "curva":
                getListado_usos().setCurva(getListado_usos().getCurva()+1);
                break;
            case "azul":
                getListado_usos().setAzul(getListado_usos().getAzul()+1);
                break;
            case "rojo":
                getListado_usos().setRojo(getListado_usos().getRojo()+1);
                break;
            case "verde":
                getListado_usos().setVerde(getListado_usos().getVerde()+1);
                break;
            case "amarillo":
                getListado_usos().setAmarillo(getListado_usos().getAmarillo()+1);
                break;
            case "naranja":
                getListado_usos().setNaranja(getListado_usos().getNaranja()+1);
                break;
            case "morado":
                getListado_usos().setMorado(getListado_usos().getMorado()+1);
                break;
            case "cafe":
                getListado_usos().setCafe(getListado_usos().getCafe()+1);
                break;
            case "negro":
                getListado_usos().setNegro(getListado_usos().getNegro()+1);
                break;
            default:
                break;
        }
    }

    public void setExistenErrores(boolean existenErrores){
        this.existenErrores = existenErrores;
    }

    public void setTemporal(Instruccion temporal){
        this.temporal = temporal;
    }

    public ArrayList<String> getListado(){
        return this.listado;
    }

    public ArrayList<Instruccion> getTemp(){
        return this.temp;
    }

    public void setTemp(ArrayList<Instruccion> temp){
        this.temp = temp;
    }

    public void setListado(ArrayList<String> listado){
        this.listado = listado;
    }

    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void agregarInstruccion(boolean t_instruccion, String t_figura){
        temporal = new Instruccion();
        temporal.setGraficar(t_instruccion);
        temporal.setFigura(t_figura);
        temporal.setParametros(listado);
        temp.add(temporal);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Linea: "+cur_token.right+" Columna: "+cur_token.left+" Valor:"+cur_token.value);
        if (symbl_name_from_id(cur_token.sym).equalsIgnoreCase("ERRLEX")){
            agregandoErrores(cur_token.value.toString(),cur_token.right,cur_token.left,"Lexico","Símbolo no existe en el lenguaje");
        } else {
            agregandoErrores(cur_token.value.toString(),cur_token.right,cur_token.left,"Sintactico","Se esperaba: {"+nombres(expected_token_ids())+"}");
        }
    }

    public String nombres(List<Integer> nombres){
        String retorno = "";
        for (int i = 0; i < nombres.size(); i++){
            String name = symbl_name_from_id(nombres.get(i));
            if (!name.equalsIgnoreCase("error")){
                if (i==nombres.size()-1){
                    retorno += name;
                } else {
                    retorno += name+", ";
                }
            }
        }
        return retorno;
    }

    public Symbol getS(){
        return this.sym;
    }
    protected int error_sync_size() {
        return 2;
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {
        private final parser parser;

        /** Constructor */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= instruccion EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // instruccion ::= tipo_instruccion instruccion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // instruccion ::= tipo_instruccion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // instruccion ::= error instruccion
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // tipo_instruccion ::= GRAFICAR figura
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // tipo_instruccion ::= ANIMAR OBJETO ANTERIOR tres_param
                {
                    Object RESULT =null;
                    agregarInstruccion(false,"animar");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // animacion ::= LINEA
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("linea");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // animacion ::= CURVA
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("curva");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // animacion ::= error
                {
                    Object RESULT =null;
                    System.out.println("error en animacion");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // color ::= AZUL
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("azul");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // color ::= ROJO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("rojo");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // color ::= VERDE
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("verde");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // color ::= AMARILLO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("amarillo");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // color ::= NARANJA
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("naranja");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // color ::= MORADO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("morado");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // color ::= CAFE
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("cafe");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // color ::= NEGRO
                {
                    Object RESULT =null;
                    int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    RESULT = e; sumarUno("negro");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // color ::= error
                {
                    Object RESULT =null;
                    System.out.println("color");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("color",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // figura ::= CIRCULO cuatro_param
                {
                    Object RESULT =null;
                    agregarInstruccion(true,"circulo");      sumarUno("circulo");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // figura ::= CUADRADO cuatro_param
                {
                    Object RESULT =null;
                    agregarInstruccion(true,"cuadrado");     sumarUno("cuadrado");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // figura ::= RECTANGULO cinco_param
                {
                    Object RESULT =null;
                    agregarInstruccion(true,"rectangulo");   sumarUno("rectangulo");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // figura ::= LINEA cinco_param
                {
                    Object RESULT =null;
                    agregarInstruccion(true,"linea");        sumarUno("linea_figura");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // figura ::= POLIGONO seis_param
                {
                    Object RESULT =null;
                    agregarInstruccion(true,"poligono");     sumarUno("poligono");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // figura ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // tres_param ::= PARENTESIS_A operacion COMA operacion COMA animacion PARENTESIS_C
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    if (p1!=null && p2!=null && p3!= null){listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); }
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tres_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // tres_param ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("tres_param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // cuatro_param ::= PARENTESIS_A operacion COMA operacion COMA operacion COMA color PARENTESIS_C
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    if (p1!=null && p2!=null && p3!= null && p4!=null){listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cuatro_param",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // cuatro_param ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cuatro_param",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // cinco_param ::= PARENTESIS_A operacion COMA operacion COMA operacion COMA operacion COMA color PARENTESIS_C
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    if (p1!=null && p2!=null && p3!= null && p4!=null && p5!=null){listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString()); listado.add(p5.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cinco_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // cinco_param ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("cinco_param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // seis_param ::= PARENTESIS_A operacion COMA operacion COMA operacion COMA operacion COMA operacion COMA color PARENTESIS_C
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
                    int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
                    int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
                    Object p3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
                    int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
                    int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
                    Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
                    int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
                    int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
                    Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
                    int p6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int p6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object p6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    if (p1!=null && p2!=null && p3!= null && p4!=null && p5!=null && p6!=null){listado = new ArrayList<>(); listado.add(p1.toString()); listado.add(p2.toString()); listado.add(p3.toString()); listado.add(p4.toString()); listado.add(p5.toString());listado.add(p6.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("seis_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // seis_param ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("seis_param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // operacion ::= operacion SUMA operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if (e1!=null && s!=null && e2!=null)  {RESULT = Integer.parseInt(e1.toString())+Integer.parseInt(e2.toString()); agregandoOperandos("SUMA",sright,sleft,e1.toString()+"+"+e2.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // operacion ::= operacion RESTA operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if (e1!=null && s!=null && e2!=null)  {RESULT = Integer.parseInt(e1.toString())-Integer.parseInt(e2.toString()); agregandoOperandos("RESTA",sright,sleft,e1.toString()+"-"+e2.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // operacion ::= operacion MULTIPLICACION operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if (e1!=null && s!=null && e2!=null)  {RESULT = Integer.parseInt(e1.toString())*Integer.parseInt(e2.toString()); agregandoOperandos("MULTIPLICACION",sright,sleft,e1.toString()+"*"+e2.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // operacion ::= PARENTESIS_A operacion PARENTESIS_C
                {
                    Object RESULT =null;
                    int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if(s!=null && p1!=null && p2!=null){RESULT = Integer.parseInt(s.toString());} else {System.out.println("Error con parentesis");};
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // operacion ::= NUMERO
                {
                    Object RESULT =null;
                    int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if(n!=null){RESULT = (int)Double.parseDouble(n.toString());}
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // operacion ::= operacion DIVISION operacion
                {
                    Object RESULT =null;
                    int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
                    int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
                    Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
                    int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
                    int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
                    Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                    int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
                    Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    if(e1!=null && s!=null && e2!=null)
                    {if(Integer.parseInt(e2.toString()) > 0)
                    {RESULT = (int) (Integer.parseInt(e1.toString())/Integer.parseInt(e2.toString()));
                        agregandoOperandos("DIVISION",sright,sleft,e1.toString()+"/"+e2.toString());}
                    else
                    {RESULT = 0;}
                    }

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // operacion ::= error
                {
                    Object RESULT =null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int                        CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack            CUP$parser$stack,
                int                        CUP$parser$top)
                throws java.lang.Exception
        {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
